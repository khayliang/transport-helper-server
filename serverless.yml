org: dorecorn
app: transport-helper-server
service: transport-helper-server
frameworkVersion: "3"
useDotenv: true

plugins:
  - serverless-offline

custom:
  DYNAMODB_USER_TABLE: ${self:service}-UserTable-${sls:stage}
  DYNAMODB_ACTIVITY_TABLE: ${self:service}-ActivityTable-${sls:stage}
  DYNAMODB_VEHICLE_TABLE: ${self:service}-VehicleTable-${sls:stage}

provider:
  name: aws
  runtime: nodejs14.x
  environment:
    DYNAMODB_USER_TABLE: ${self:custom.DYNAMODB_USER_TABLE}
    DYNAMODB_ACTIVITY_TABLE: ${self:custom.DYNAMODB_ACTIVITY_TABLE}
    DYNAMODB_VEHICLE_TABLE: ${self:custom.DYNAMODB_VEHICLE_TABLE}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:Get*"
            - "dynamodb:Scan*"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Query"
          Resource: "*"
  apiGateway:
    apiKeys:
      - name: api-key
        value: ${env:API_KEY}


resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.DYNAMODB_USER_TABLE}
        AttributeDefinitions:
          - AttributeName: telegram_id
            AttributeType: N
          - AttributeName: army_unit
            AttributeType: S
        KeySchema:
          - AttributeName: telegram_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ArmyUnitIndex
            KeySchema:
              - AttributeName: army_unit
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ActivityTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.DYNAMODB_ACTIVITY_TABLE}
        AttributeDefinitions:
          - AttributeName: vehicle_no_by_week
            AttributeType: S
          - AttributeName: final_mileage
            AttributeType: N
          - AttributeName: telegram_id_by_month
            AttributeType: S

        KeySchema:
          - AttributeName: vehicle_no_by_week
            KeyType: HASH
          - AttributeName: final_mileage
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserActivityIndex
            KeySchema:
              - AttributeName: telegram_id_by_month
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 1

    VehicleTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.DYNAMODB_VEHICLE_TABLE}
        AttributeDefinitions:
          - AttributeName: vehicle_no
            AttributeType: N
          - AttributeName: node
            AttributeType: S
          - AttributeName: timestamp_by_vehicle_no
            AttributeType: N
        KeySchema:
          - AttributeName: vehicle_no
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: NodeVehiclesIndex
            KeySchema:
              - AttributeName: node
                KeyType: HASH
              - AttributeName: timestamp_by_vehicle_no
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /
          method: get
          private: true

  createNewUser:
    handler: lambdas/createNewUser.createNewUser
    events:
      - http:
          path: create_new_user
          method: POST
          cors: false
          private: true

  registerVehicle:
    handler: lambdas/registerVehicle.registerVehicle
    events:
      - http:
          path: register_vehicle
          method: POST
          cors: false
          private: true

  getUser:
    handler: lambdas/getUser.getUser
    events:
      - http:
          path: get_user
          method: GET
          cors: false
          private: true

  getUsersInArmyUnit:
    handler: lambdas/getUsersInArmyUnit.getUsersInArmyUnit
    events:
      - http:
          path: get_users_in_army_unit
          method: GET
          cors: false
          private: true

  getUserActivityOfMonth:
    handler: lambdas/getUserActivityOfMonth.getUserActivityOfMonth
    events:
      - http:
          path: get_user_activity_of_month
          method: GET
          cors: false
          private: true

  createNewActivity:
    handler: lambdas/createNewActivity.createNewActivity
    events:
      - http:
          path: create_new_activity
          method: POST
          cors: false
          private: true

  getWptListForNode:
    handler: lambdas/getWptListForNode.getWptListForNode
    events:
      - http:
          path: get_wpt_list_for_node
          method: GET
          cors: false
          private: true
